# .github/workflows/release.yml
name: Build and Release

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      test-mode:
        description: "Build only"
        required: false
        default: "false"

jobs:
  release:
    name: release ${{ matrix.target }}
    permissions: write-all
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_ext: tar.gz
            archive_cmd: tar -czvf
          - os: macos-latest
            target: x86_64-apple-darwin
            archive_ext: tar.gz
            archive_cmd: tar -czvf
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            archive_ext: zip
            archive_cmd: powershell Compress-Archive

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy,rustfmt
          target: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Collect files
        id: collect
        shell: bash
        run: |
          # Determine the binary name (same as repo name)
          BIN_NAME="${{ github.event.repository.name }}"
          # On Windows the binary ends with .exe
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BIN_NAME="${BIN_NAME}.exe"
          fi

          # Path to the compiled binary
          BIN_PATH="target/${{ matrix.target }}/release/${BIN_NAME}"

          # Verify the binary exists
          if [[ ! -f "$BIN_PATH" ]]; then
            echo "::error::Binary not found at $BIN_PATH"
            exit 1
          fi

          # Create a temporary staging directory (outside of any archive)
          STAGE_DIR="${{ runner.temp }}/stage-${{ matrix.target }}"
          mkdir -p "$STAGE_DIR"

          # Copy ONLY the binary and config.toml (no *.d files)
          cp "$BIN_PATH" "$STAGE_DIR/"
          cp config.toml "$STAGE_DIR/"

          # Export the stage path for later steps
          echo "stage_dir=$STAGE_DIR" >> $GITHUB_OUTPUT
          echo "binary_name=$BIN_NAME" >> $GITHUB_OUTPUT

      - name: Create archive
        id: archive
        shell: bash
        run: |
          STAGE="${{ steps.collect.outputs.stage_dir }}"
          OUT_NAME="${{ github.event.repository.name }}-${{ matrix.target }}.${{ matrix.archive_ext }}"

          if [[ "${{ matrix.archive_ext }}" == "zip" ]]; then
            # Zip with Powershell
            pwsh -Command "Compress-Archive -Path '${STAGE}\\*' -DestinationPath '${OUT_NAME}'"
          else
            # For tar.gz
            tar -czvf "${OUT_NAME}" -C "${STAGE}" .
          fi

          # Export the archive path for later steps
          echo "archive_path=${OUT_NAME}" >> $GITHUB_OUTPUT

      - name: Upload archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.target }}
          path: ${{ steps.archive.outputs.archive_path }}
          retention-days: 30

      - name: Attach archive to Release
        if: success() && inputs.test-mode != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ github.ref_name }}" \
            "${{ steps.archive.outputs.archive_path }}" \
            --repo "${{ github.repository }}" \
            --clobber